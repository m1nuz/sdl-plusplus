// -*- C++ -*-

#pragma once

#include <cstdint>

namespace sdl {
    namespace detail {
        struct point final {
            int32_t x;
            int32_t y;
        };
    } // namespace detail

    namespace detail {
        struct rect final {
            int32_t x;
            int32_t y;
            int32_t w;
            int32_t h;
        };
    } // namespace detail

    namespace detail {
        struct color final {
            uint8_t r;
            uint8_t g;
            uint8_t b;
            uint8_t a;
        };
    } // namespace detail

    namespace detail {
        class window;
        struct point;
        struct color;
        struct rect;

        class renderer final {
        public:
            renderer(const window &_w);
            ~renderer();

            renderer& software();
            renderer& accelerated();
            renderer& vsync();
            renderer& target_texture();
            renderer& create();

            renderer& clear();
            renderer& present();
            renderer& draw_color(const color& c);
            renderer& draw_point(const point& pt);
            renderer& draw_line(const point& pt1, const point& pt2);
            renderer& draw_rect(const rect& rc, const bool fill);

        public:
            void *id;
            uint32_t flags;
            const window& w;
        };
    } // namespace detail
} // namespace sdl
