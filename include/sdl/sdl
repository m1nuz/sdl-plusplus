// -*- C++ -*-

#pragma once

#ifndef SDL_PLUSPLUS_INIT
#define SDLPP_INIT_EXTERN
#else
#define SDLPP_INIT_EXTERN extern
#endif

#include <cstdint>
#include <string>

namespace sdl
{
    class window final {
    public:
        friend class renderer;
        friend class graphic_context;

        window(int argc, char* argv[]);
        ~window();

        window& at(const int x, const int y);
        window& across(const int _w, const int _h);
        window& named(const std::string& _title);
        window& show();
        window& with_opengl();
        window& create();

        void swap_buffers();
    private:
        void *id;
        int x;
        int y;
        int w;
        int h;
        std::string title_text;
        uint32_t flags;
    };

    class renderer final {
    public:
        renderer(const window &_w);
        ~renderer();

        renderer& software();
        renderer& accelerated();
        renderer& vsync();
        renderer& target_texture();
        renderer& create();

        renderer& clear();
        renderer& present();
    public:
        void *id;
        uint32_t flags;
        const window& w;
    };

    class timer
    {
    public:
        static void delay(uint32_t ms);
    };

    class event {
    public:
        enum {
            QUIT = 0,
        };

        friend int poll(event &e);

        bool operator==(int type);
    private:
        int type;
    };

    class graphic_context final {
    public:
        graphic_context(const window &_w);
        ~graphic_context();

        graphic_context& doublebuffered();
        graphic_context& version(const int major, const int minor);
        graphic_context& with_core_profile();
        graphic_context& with_forward_context();
        graphic_context& create();
    public:
        void *id;
        int attributes[30];
        int context_flags;
        const window& w;
    };

    int poll(event &e);

    namespace detail {
        class _init {
        public:
            _init();
            ~_init();
        };
        SDLPP_INIT_EXTERN _init init;
    } // namespace detail
} // namespace sdl

namespace sdl {
    namespace detail {

    } // namespace detail
} // namespace sdl


