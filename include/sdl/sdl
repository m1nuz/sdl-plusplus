// -*- C++ -*-

#pragma once

#ifndef SDL_PLUSPLUS_INIT
#define SDLPP_INIT_EXTERN
#else
#define SDLPP_INIT_EXTERN extern
#endif

#include <stdint.h>

namespace sdl
{
    class renderer;
    class graphic_context;
    class graphic_attributes;

    class window
    {
    public:
        enum
        {
            FULLSCREEN          = 0x0001,
            FULLSCREEN_DESKTOP  = 0x0002,
            OPENGL              = 0x0004,
            SHOWN               = 0x0008,
            HIDDEN              = 0x0010,
            BORDERLESS          = 0x0020,
            RESIZABLE           = 0x0040,
            MINIMIZED           = 0x0080,
            MAXIMIZED           = 0x0100,
            INPUT_GRABBED       = 0x0200,
            INPUT_FOCUS         = 0x0400,
            MOUSE_FOCUS         = 0x0800,
            FOREIGN             = 0x1000,
            ALLOW_HIGHDPI       = 0x2000,
            MOUSE_CAPTURE       = 0x4000
        };

        friend class renderer;
        friend class graphic_context;

        window(const char *title, int x, int y, int w, int h, unsigned int flags);
        ~window();

        static void set_title(window &w, const char *title);
        static const char* get_title(const window &w);

        // GL
        static void swap_buffers(window &w);
    private:
        void *id;
    };

    class renderer
    {
    public:
        enum
        {
            SOFTWARE        = 0x0001,
            ACCELERATED     = 0x0002,
            PRESENT_VSYNC   = 0x0004,
            TARGET_TEXTURE  = 0x0008
        };

        renderer(const window *w, unsigned int flags);
        ~renderer();

        static void clear(const renderer &r);
        static void present(const renderer &r);
    public:
        void *id;
    };

    class timer
    {
    public:
        static void delay(uint32_t ms);
    };

    class event
    {
    public:
        enum
        {
            QUIT = 0,
        };

        friend int poll(event &e);

        bool operator==(int type);
    private:
        int type;
    };

    void set_attribute(const graphic_attributes &attrs, unsigned int attr, int value);
    int get_attribute(const graphic_attributes &attrs, unsigned int attr);

    class graphic_attributes
    {
    public:
        friend void set_attribute(const graphic_attributes &, unsigned int, int);
        friend int get_attribute(const graphic_attributes &, unsigned int);
        graphic_attributes();
        ~graphic_attributes();
    private:
        int attributes[30];
    };

    class graphic_context
    {
    public:
        graphic_context(const window *w);
        ~graphic_context();
    public:
        void *id;
    };

    int poll(event &e);

    namespace detail
    {
        class _Init
        {
        public:
            _Init();
            ~_Init();
        };
        SDLPP_INIT_EXTERN _Init init;
    }
    // namespace detail
} // namespace sdl

namespace sdl
{
    namespace detail
    {

    } // namespace detail
} // namespace sdl


